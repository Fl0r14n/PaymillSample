package io.safedrive.payments.paymill.resources;

import io.safedrive.payments.paymill.resources.internal.InvoiceResource;
import io.safedrive.payments.paymill.resources.internal.FeeResource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.ArrayList;
import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * A transaction is the charging of a credit card or a direct debit. In this
 * case you need a new transaction object with either a valid token, payment,
 * client + payment or preauthorization. Every transaction has a unique
 * identifier which will be generated by Paymill to identify every transaction.
 * You can issue/create, list and display transactions in detail. Refunds can be
 * done in an extra entity.
 */
@Data
@EqualsAndHashCode(callSuper = false)
public class TransactionResource extends Resource {

    public static final String STATUS_OPEN = "open";
    public static final String STATUS_PENDING = "pending";
    public static final String STATUS_CLOSED = "closed";
    public static final String STATUS_FAILED = "failed";
    public static final String STATUS_PARTIAL_REFUNDED = "partial_refunded";
    public static final String STATUS_REFUNDED = "refunded";
    public static final String STATUS_PREAUTHORIZE = "preauthorize";
    public static final String STATUS_CHARGEBACK = "chargeback";

    @JsonProperty("amount")
    private String amount;
    @JsonProperty("origin_amount")
    private Integer originAmount;
    @JsonProperty("currency")
    private String currency;
    @JsonProperty("status")
    private String status;
    @JsonProperty("description")
    private String description;
    @JsonProperty("livemode")
    private Boolean liveMode;
    @JsonProperty("is_fraud")
    private Boolean isFraud;
    @JsonProperty("refunds")
    private ArrayList<RefundsResource> refunds;
    @JsonProperty("payment")
    private PaymentResource payment;
    @JsonProperty("client")
    private ClientResource client;
    @JsonProperty("preauthorization")
    private PreauthorizationResource preauthorization;
    @JsonProperty("response_code")
    private Integer responseCode;
    @JsonProperty("short_id")
    private String shortId;
    @JsonProperty("invoices")
    private ArrayList<InvoiceResource> invoices;
    @JsonProperty("fees")
    private ArrayList<FeeResource> fees;
}
